import { useEffect, useState } from "react";
import "../styles/globals.css";
import type { AppProps } from "next/app";
import { useRouter } from "next/router";
import { ThemeProvider } from "styled-components";
import { AppTheme } from "../themes/AppTheme";
import { GlobalStyle } from "../themes/GlobalStyle";
import SideBar from "../components/SideBar";
import { Navbar } from "../components/navbar";
import Head from "next/head";
import { NotificationIcon } from "../components/icons/NotificationIcon";
import Image from "next/image";

function MyApp({ Component, pageProps }: AppProps) {
  const router = useRouter();
  // State, used to keep track of authentication
  const [authorized, setAuthorized] = useState(false);
  // State, used to keep track of outline or no outline around buttons, inputs, etc.
  const [hasNoFocus, setHasNoFocus] = useState(true);

  // If the user hits the 'tab' key, we want to add outlines back to focused elements for accessibility.
  const handleTabKeyPress = (evt: KeyboardEvent) => {
    if (evt.key === "Tab") setHasNoFocus(false);
  };

  useEffect(() => {
    const handleRouteChange = (url: any, { shallow }: any) => {
      console.log(
        `App is changing to ${url} ${
          shallow ? "with" : "without"
        } shallow routing`
      );
    };

    const handleRouteChangeComplete = (url: any, { shallow }: any) => {
      console.log(
        `App has changed to ${url} ${
          shallow ? "with" : "without"
        } shallow routing`
      );
    };
    router.events.on("routeChangeStart", handleRouteChange);
    router.events.on("routeChangeComplete", handleRouteChangeComplete);
    // If the component is unmounted, unsubscribe
    // from the event with the `off` method:
    return () => {
      router.events.off("routeChangeStart", handleRouteChange);
      router.events.off("routeChangeComplete", handleRouteChangeComplete);
    };
  }, [router.events]);
  useEffect(() => {
    document.addEventListener("keydown", handleTabKeyPress, false);
    authCheck(router.asPath);

    // set authorized to false to hide page content while changing routes
    const hideContent = () => setAuthorized(false);
    router.events.on("routeChangeStart", hideContent);

    // run auth check on route change
    router.events.on("routeChangeComplete", authCheck);

    // unsubscribe from events in useEffect return function
    return () => {
      document.removeEventListener("keydown", handleTabKeyPress, false);
      router.events.off("routeChangeStart", hideContent);
      router.events.off("routeChangeComplete", authCheck);
    };
  }, [router.asPath, router.events]);
  const authCheck = (url: string) => {
    // redirect to login page if accessing a private page and not logged in
    console.log(url);
    // const publicPaths = ["/login", "/register", "/"];
    setAuthorized(true);
  };
  return (
    <ThemeProvider theme={AppTheme}>
      <GlobalStyle hasNoFocus={hasNoFocus} />
      <Head>
        <title>AV Design</title>
        <meta name="description" content="Generated by create next app" />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1.0, maximum-scale=1"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {router.pathname.includes("dashboard") ? (
        authorized && (
          <>
            <div className="contain_dashboard flex">
              <SideBar />
              <div className="main_box px-[25px] py-[16px] grow">
                <div className={"flex flex-row items-center"}>
                  <div className={"grow mr-[34px]"}>
                    <div className={"relative"}>
                      <div
                        className={
                          "absolute top-1/2 tranform -translate-y-1/2 left-[20px]"
                        }
                      >
                        <svg
                          width="25"
                          height="24"
                          viewBox="0 0 25 24"
                          fill="none"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            fillRule="evenodd"
                            clipRule="evenodd"
                            d="M14.8849 15.4458C12.2346 17.5685 8.35521 17.4014 5.89842 14.9446C3.26238 12.3086 3.26238 8.0347 5.89842 5.39866C8.53446 2.76262 12.8083 2.76262 15.4443 5.39866C17.9011 7.85544 18.0682 11.7349 15.9455 14.3852L21.1012 19.5408C21.3941 19.8337 21.3941 20.3086 21.1012 20.6015C20.8083 20.8944 20.3334 20.8944 20.0405 20.6015L14.8849 15.4458ZM6.95908 13.884C4.90883 11.8337 4.90883 8.50957 6.95908 6.45932C9.00934 4.40907 12.3334 4.40907 14.3837 6.45932C16.4324 8.50807 16.4339 11.8288 14.3882 13.8795C14.3867 13.881 14.3852 13.8824 14.3836 13.884C14.3821 13.8855 14.3806 13.887 14.3792 13.8885C12.3285 15.9342 9.00783 15.9327 6.95908 13.884Z"
                            fill="#0E0E2C"
                          />
                        </svg>
                      </div>
                      <input
                        type={"search"}
                        placeholder={"Search"}
                        className={"py-[11px] px-[52px] w-full rounded-lg"}
                      />
                    </div>
                  </div>
                  <div
                    className={
                      "bg-white rounded-full mr-[11px] py-[10px] px-[12px]"
                    }
                  >
                    <NotificationIcon iconHeight={"24px"} iconWidth={"24px"} />
                  </div>
                  <div
                    className={
                      "flex flex-row items-center bg-white rounded-lg py-[3.5px] px-[8.5px]"
                    }
                  >
                    <div className={"mr-[11px] h-[36px] w-fit"}>
                      <Image
                        src={"/images/profile.png"}
                        alt={"profile"}
                        width={"36"}
                        height={"36"}
                      />
                    </div>
                    <div className={"mr-[8px]"}>
                      <span>chibuzo</span>
                    </div>
                    <div>
                      <svg
                        width="7"
                        height="5"
                        viewBox="0 0 7 5"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path d="M7 0.5H0L3.5 4.5L7 0.5Z" fill="#0E0E2C" />
                      </svg>
                    </div>
                  </div>
                </div>
                <Component {...pageProps} />{" "}
              </div>
            </div>
          </>
        )
      ) : (
        <>
          <Navbar />
          <Component {...pageProps} />
        </>
      )}
    </ThemeProvider>
  );
}

export default MyApp;
