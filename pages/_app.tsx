import { useEffect, useState } from "react";
import "../styles/globals.css";
import type { AppProps } from "next/app";
import { useRouter } from "next/router";
import { ThemeProvider } from "styled-components";
import { AppTheme } from "../themes/AppTheme";
import { GlobalStyle } from "../themes/GlobalStyle";
import SideBar from "../components/SideBar";
import { Navbar } from "../components/navbar";
import Head from "next/head";

function MyApp({ Component, pageProps }: AppProps) {
  const router = useRouter();
  // State, used to keep track of authentication
  const [authorized, setAuthorized] = useState(false);
  // State, used to keep track of outline or no outline around buttons, inputs, etc.
  const [hasNoFocus, setHasNoFocus] = useState(true);

  // If the user hits the 'tab' key, we want to add outlines back to focused elements for accessibility.
  const handleTabKeyPress = (evt: KeyboardEvent) => {
    if (evt.key === "Tab") setHasNoFocus(false);
  };

  useEffect(() => {
    const handleRouteChange = (url: any, { shallow }: any) => {
      console.log(
        `App is changing to ${url} ${
          shallow ? "with" : "without"
        } shallow routing`
      );
    };

    const handleRouteChangeComplete = (url: any, { shallow }: any) => {
      console.log(
        `App has changed to ${url} ${
          shallow ? "with" : "without"
        } shallow routing`
      );
    };
    router.events.on("routeChangeStart", handleRouteChange);
    router.events.on("routeChangeComplete", handleRouteChangeComplete);
    // If the component is unmounted, unsubscribe
    // from the event with the `off` method:
    return () => {
      router.events.off("routeChangeStart", handleRouteChange);
      router.events.off("routeChangeComplete", handleRouteChangeComplete);
    };
  }, [router.events]);
  useEffect(() => {
    document.addEventListener("keydown", handleTabKeyPress, false);
    authCheck(router.asPath);

    // set authorized to false to hide page content while changing routes
    const hideContent = () => setAuthorized(false);
    router.events.on("routeChangeStart", hideContent);

    // run auth check on route change
    router.events.on("routeChangeComplete", authCheck);

    // unsubscribe from events in useEffect return function
    return () => {
      document.removeEventListener("keydown", handleTabKeyPress, false);
      router.events.off("routeChangeStart", hideContent);
      router.events.off("routeChangeComplete", authCheck);
    };
  }, [router.asPath, router.events]);
  const authCheck = (url: string) => {
    // redirect to login page if accessing a private page and not logged in
    console.log(url);
    // const publicPaths = ["/login", "/register", "/"];
    setAuthorized(true);
  };
  return (
    <ThemeProvider theme={AppTheme}>
      <GlobalStyle hasNoFocus={hasNoFocus} />
      <Head>
        <title>AV Design</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="stylesheet"
          href={
            "https://cdnjs.cloudflare.com/ajax/libs/simple-line-icons/2.5.5/css/simple-line-icons.min.css"
          }
        />
      </Head>
      {router.pathname.includes("dashboard") ? (
        authorized && (
          <>
            <div style={{ display: "flex" }} className="contain_dashboard">
              <SideBar />
              <div className="main_box">
                <Component {...pageProps} />{" "}
              </div>
            </div>
          </>
        )
      ) : (
        <>
          <Navbar />
          <Component {...pageProps} />
        </>
      )}
    </ThemeProvider>
  );
}

export default MyApp;
